const calcButton = document.querySelector(".calc-button");

calcButton.addEventListener("click", onClickCalcButton);

function getTableOfChangedElements(
  tableFormuleOfPartsOne,
  tableFormuleOfPartsTwo
) {
  let tableOfElements = [];

  for (const curElemOne of tableFormuleOfPartsOne) {
    for (const curElemTableOne of curElemOne.tableOfElements) {
      for (const curElemTwo of tableFormuleOfPartsTwo) {
        for (const curElemTableTwo of curElemTwo.tableOfElements) {
          if (curElemTableTwo.elemOfTable === curElemTableOne.elemOfTable) {
            if (curElemTableTwo.valence !== curElemTableOne.valence) {
              const foundedElem = tableOfElements.find(
                (zn) => zn.elemOfOnePart === curElemTableOne.elemOfTable
              );
              if (foundedElem === undefined) {
                const newObj = {
                  elemOfOnePart: curElemTableOne.elemOfTable,
                  valenOfPartOne: curElemTableOne.valence,
                  countElemParteOne: curElemTableOne.count,
                  elemOfTwoPart: curElemTableTwo.elemOfTable,
                  valenOfPartTwo: curElemTableTwo.valence,
                  countElemPartTwo: curElemTableTwo.count,
                };
                tableOfElements.push(newObj);
              }
            }
          }
        }
      }
    }
  }

  return tableOfElements;
}

function setCoefficientsForTableChanges(tableOfChangedElements) {
  for (const curElem of tableOfChangedElements) {
    if (curElem.countElemParteOne === curElem.countElemPartTwo) {
      curElem.coefficient =
        curElem.valenOfPartOne * curElem.countElemParteOne -
        curElem.valenOfPartTwo * curElem.countElemPartTwo;
    } else {
      if (curElem.countElemParteOne === 1) {
        curElem.coefficient =
          curElem.valenOfPartOne *
            curElem.countElemParteOne *
            curElem.countElemPartTwo -
          curElem.valenOfPartTwo * curElem.countElemPartTwo;
      } else if (curElem.countElemPartTwo === 1) {
        if (curElem.valenOfPartOne !== 0) {
          curElem.coefficient =
            curElem.valenOfPartTwo *
              curElem.countElemPartTwo *
              curElem.countElemParteOne -
            curElem.valenOfPartOne * curElem.countElemParteOne;
        } else {
          curElem.coefficient =
            curElem.valenOfPartOne * curElem.countElemParteOne -
            curElem.valenOfPartTwo *
              curElem.countElemPartTwo *
              curElem.countElemParteOne;
        }
      } else {
        curElem.coefficient =
          curElem.valenOfPartOne * curElem.countElemParteOne -
          curElem.valenOfPartTwo * curElem.countElemPartTwo;
      }
    }
  }
}

function getStructureOfCoeff(tableOfChangedElements) {
  let sumPluses = 0;
  let sumMinuses = 0;

  for (const curElem of tableOfChangedElements) {
    if (curElem.coefficient >= 0) {
      sumPluses += curElem.coefficient;
    } else {
      sumMinuses += curElem.coefficient;
    }
  }

  const newObj = {
    plus: sumPluses,
    minus: -sumMinuses,
  };
  return newObj;
}

function getStructTotalCoeff(structureOfCoeff) {
  let totalScruct = new Object();

  if (structureOfCoeff.plus === structureOfCoeff.minus) {
    totalScruct.totalPlus = structureOfCoeff.plus / structureOfCoeff.minus;
    totalScruct.totalMinus = structureOfCoeff.plus / structureOfCoeff.minus;
  } else if (
    (structureOfCoeff.plus !== 1 && structureOfCoeff.minus === 1) ||
    (structureOfCoeff.plus === 1 && structureOfCoeff.minus !== 1)
  ) {
    totalScruct.totalPlus = structureOfCoeff.plus;
    totalScruct.totalMinus = structureOfCoeff.minus;
  } else if (structureOfCoeff.plus > structureOfCoeff.minus) {
    let originalPlus = structureOfCoeff.plus;
    let originalMinus = structureOfCoeff.minus;
  }
  /* 	ТекИтоговаяСтруктура = Новый Структура;
	
	Если СтруктураКоэфициентов.Плюс = СтруктураКоэфициентов.Минус Тогда
		
	     ТекИтоговаяСтруктура.Вставить("ИтогПлюс",СтруктураКоэфициентов.Плюс/СтруктураКоэфициентов.Минус);	
	     ТекИтоговаяСтруктура.Вставить("ИтогМинус",СтруктураКоэфициентов.Плюс/СтруктураКоэфициентов.Минус);	
		 
	 ИначеЕсли (СтруктураКоэфициентов.Плюс <> 1 И СтруктураКоэфициентов.Минус = 1)
		 ИЛИ (СтруктураКоэфициентов.Плюс = 1 И СтруктураКоэфициентов.Минус <> 1) Тогда	 
		
         ТекИтоговаяСтруктура.Вставить("ИтогПлюс",СтруктураКоэфициентов.Плюс);	
	     ТекИтоговаяСтруктура.Вставить("ИтогМинус",СтруктураКоэфициентов.Минус);			
		
	ИначеЕсли СтруктураКоэфициентов.Плюс > СтруктураКоэфициентов.Минус Тогда
		 
		 ИсходныйПлюс = СтруктураКоэфициентов.Плюс;
		 ИсходныйМинус = СтруктураКоэфициентов.Минус;
		 
		 ТекЗначениеМинус = ИсходныйМинус;
		 
		 Для Ном = 2 по ТекЗначениеМинус Цикл
			 
			 РезультатПлюс = ИсходныйПлюс / Ном;
			 РезультатМинус = ИсходныйМинус / Ном;
			 
			 ОстатокПлюс = ИсходныйПлюс % Ном;
			 ОстатокМинус = ИсходныйМинус % Ном;
			 
			 Пока ОстатокПлюс = 0 
				 И ОстатокМинус = 0 Цикл
				 
				  ИсходныйПлюс = РезультатПлюс;
				  ИсходныйМинус = РезультатМинус;
				  
				  РезультатПлюс = ИсходныйПлюс / Ном;
				  РезультатМинус = ИсходныйМинус / Ном;
				  
				  ОстатокПлюс = ИсходныйПлюс % Ном;
				  ОстатокМинус = ИсходныйМинус % Ном;
				  
				  
			 КонецЦикла;	 
			 
		 КонецЦикла;	 
		 
         ТекИтоговаяСтруктура.Вставить("ИтогПлюс",ИсходныйПлюс);	
	     ТекИтоговаяСтруктура.Вставить("ИтогМинус",ИсходныйМинус);	
		 
	ИначеЕсли СтруктураКоэфициентов.Плюс < СтруктураКоэфициентов.Минус Тогда
		 
		 ИсходныйПлюс = СтруктураКоэфициентов.Плюс;
		 ИсходныйМинус = СтруктураКоэфициентов.Минус;
		 
		 ТекЗначениеПлюс = ИсходныйПлюс;
		 
		 Для Ном = 2 по ТекЗначениеПлюс Цикл
			 
			 РезультатПлюс = ИсходныйПлюс / Ном;
			 РезультатМинус = ИсходныйМинус / Ном;
			 
			 ОстатокПлюс = ИсходныйПлюс % Ном;
			 ОстатокМинус = ИсходныйМинус % Ном;
			 
			 Пока ОстатокПлюс = 0 
				 И ОстатокМинус = 0 Цикл
				 
				 ИсходныйПлюс = РезультатПлюс;
				 ИсходныйМинус = РезультатМинус;
				 
				 РезультатПлюс = ИсходныйПлюс / Ном;
				 РезультатМинус = ИсходныйМинус / Ном;
				 
				 ОстатокПлюс = ИсходныйПлюс % Ном;
				 ОстатокМинус = ИсходныйМинус % Ном;
	 			 
			 КонецЦикла;	 
			 
		 КонецЦикла;	 
		 
         ТекИтоговаяСтруктура.Вставить("ИтогПлюс",ИсходныйПлюс);	
	     ТекИтоговаяСтруктура.Вставить("ИтогМинус",ИсходныйМинус);					 
		 
	КонецЕсли;	
	
	Возврат ТекИтоговаяСтруктура;*/
  return totalScruct;
}

function onClickCalcButton() {
  //Тест
  /*
  let testArray = [];
  const newObj = {
    a: 1,
    b: 2,
    c: 3,
  };
  testArray.push(newObj);
  const newObjNew = {
    a: 7,
    b: 8,
    c: 9,
  };
  testArray.push(newObjNew);
  console.log(testArray);
  console.log("***********************");
  for (const el of testArray) {
    el.d = el.a * 2;
  }
  console.log(testArray);
  
  const newAr = testArray.map((el) => ({ a: el.a, b: el.b }));
  console.log(newAr);
	*/
  //Тест

  const strFormule = "NO + H3PO4 --> N2O3 + P2O3 + H2O";
  const strParts = getStructurOfParts(strFormule);

  const tableOne = getTableOfDate(strParts.partOne);
  const tableTwo = getTableOfDate(strParts.partTwo);

  const tableFormuleOfPartsOne = getTableOfParts(tableOne);
  const tableFormuleOfPartsTwo = getTableOfParts(tableTwo);

  let tableOfChangedElements = getTableOfChangedElements(
    tableFormuleOfPartsOne,
    tableFormuleOfPartsTwo
  );

  setCoefficientsForTableChanges(tableOfChangedElements);

  let structureOfCoeff = getStructureOfCoeff(tableOfChangedElements);

  console.log(structureOfCoeff);

  //Старая программа
  //Cделано
  /*  	СтруктураЧастей = ПолучитьСтруктуруЧастей(СтрокаФормулы);
	
	ТаблицаПервая = ПолучитьТаблицуДанных(СтруктураЧастей.ЧастьПервая);
	ТаблицаВторая = ПолучитьТаблицуДанных(СтруктураЧастей.ЧастьВторая);
	
	ТаблицаФормулПервойЧасти = ПолучитьТаблицуЧастей(ТаблицаПервая);
 	ТаблицаФормулВторойЧасти = ПолучитьТаблицуЧастей(ТаблицаВторая);
	

	ТаблицаИзмененныхЭлементов = Новый ТаблицаЗначений;
	ТаблицаИзмененныхЭлементов.Колонки.Добавить("ЭлементПервойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Добавить("ВалентностьЭлементаПервойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Добавить("КоличествоЭлементаПервойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Добавить("ЭлементВторойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Добавить("ВалентностьЭлементаВторойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Добавить("КоличествоЭлементаВторойЧасти");
  ТаблицаИзмененныхЭлементов.Колонки.Добавить("Коэфициент");	
  ТаблицаИзмененныхЭлементов.Колонки.Добавить("ИтоговыйКоэфициент");	
	
	Для Каждого ТекЭлемент1 из ТаблицаФормулПервойЧасти Цикл
		Для Каждого ТекЭлементТаблицы1 из ТекЭлемент1.ТаблицаЭлементов Цикл
			Для Каждого ТекЭлемент2 из ТаблицаФормулВторойЧасти Цикл
				Для Каждого ТекЭлементТаблицы2 из ТекЭлемент2.ТаблицаЭлементов Цикл
					Если ТекЭлементТаблицы2.ЭлементТаблицы = ТекЭлементТаблицы1.ЭлементТаблицы Тогда
						Если ТекЭлементТаблицы2.Валентность <> ТекЭлементТаблицы1.Валентность Тогда
							Если ТаблицаИзмененныхЭлементов.Найти(ТекЭлементТаблицы1.ЭлементТаблицы,"ЭлементПервойЧасти") = Неопределено Тогда
								
								НоваяСтрока = ТаблицаИзмененныхЭлементов.Добавить();
								НоваяСтрока.ЭлементПервойЧасти = ТекЭлементТаблицы1.ЭлементТаблицы;
								НоваяСтрока.ВалентностьЭлементаПервойЧасти = ТекЭлементТаблицы1.Валентность;
								НоваяСтрока.КоличествоЭлементаПервойЧасти = ТекЭлементТаблицы1.Количество;
								НоваяСтрока.ЭлементВторойЧасти = ТекЭлементТаблицы2.ЭлементТаблицы;
								НоваяСтрока.ВалентностьЭлементаВторойЧасти = ТекЭлементТаблицы2.Валентность;
								НоваяСтрока.КоличествоЭлементаВторойЧасти = ТекЭлементТаблицы2.Количество;
								
							КонецЕсли;	
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	

	Для Каждого ТекЭлемент из ТаблицаИзмененныхЭлементов Цикл
		
		
		Если ТекЭлемент.КоличествоЭлементаПервойЧасти = ТекЭлемент.КоличествоЭлементаВторойЧасти Тогда
			
			ТекЭлемент.Коэфициент = (ТекЭлемент.ВалентностьЭлементаПервойЧасти * ТекЭлемент.КоличествоЭлементаПервойЧасти) 
			- (ТекЭлемент.ВалентностьЭлементаВторойЧасти * ТекЭлемент.КоличествоЭлементаВторойЧасти);
			
		Иначе
			
			Если ТекЭлемент.КоличествоЭлементаПервойЧасти = 1 Тогда 
			
  			    ТекЭлемент.Коэфициент = (ТекЭлемент.ВалентностьЭлементаПервойЧасти 
				* ТекЭлемент.КоличествоЭлементаПервойЧасти 
				* ТекЭлемент.КоличествоЭлементаВторойЧасти) 
				- (ТекЭлемент.ВалентностьЭлементаВторойЧасти * ТекЭлемент.КоличествоЭлементаВторойЧасти);
				
			ИначеЕсли ТекЭлемент.КоличествоЭлементаВторойЧасти = 1 Тогда 
				
				Если ТекЭлемент.ВалентностьЭлементаПервойЧасти <> 0 Тогда 
					
					ТекЭлемент.Коэфициент = (ТекЭлемент.ВалентностьЭлементаВторойЧасти 
					* ТекЭлемент.КоличествоЭлементаВторойЧасти 
					* ТекЭлемент.КоличествоЭлементаПервойЧасти) 
					- (ТекЭлемент.ВалентностьЭлементаПервойЧасти * ТекЭлемент.КоличествоЭлементаПервойЧасти);
					
				Иначе
					
					ТекЭлемент.Коэфициент = (ТекЭлемент.ВалентностьЭлементаПервойЧасти * ТекЭлемент.КоличествоЭлементаПервойЧасти)
					- (ТекЭлемент.ВалентностьЭлементаВторойЧасти 
					* ТекЭлемент.КоличествоЭлементаВторойЧасти 
					* ТекЭлемент.КоличествоЭлементаПервойЧасти);					
					
				КонецЕсли;
				
			Иначе
				
				ТекЭлемент.Коэфициент = (ТекЭлемент.ВалентностьЭлементаПервойЧасти * ТекЭлемент.КоличествоЭлементаПервойЧасти) 
				- (ТекЭлемент.ВалентностьЭлементаВторойЧасти * ТекЭлемент.КоличествоЭлементаВторойЧасти);
				
				
			КонецЕсли;
			
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	

	СуммаПлюсов = 0;
	СуммаМинусов = 0;
	
	Для Каждого ТекСтрока из ТаблицаИзмененныхЭлементов Цикл
		
		Если ТекСтрока.Коэфициент >= 0 Тогда
			
		     СуммаПлюсов = СуммаПлюсов + ТекСтрока.Коэфициент;
			
		Иначе	
			
			 СуммаМинусов = СуммаМинусов + ТекСтрока.Коэфициент;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	СтруктураКоэфициентов = Новый Структура;
	СтруктураКоэфициентов.Вставить("Плюс",СуммаПлюсов);
	СтруктураКоэфициентов.Вставить("Минус",-СуммаМинусов);
	//Cделано

	ТекИтоговаяСтруктура = ПолучитьСтруктуруИтоговыхКоэфициентов(СтруктураКоэфициентов);
	
	Для Каждого ТекСтрока из ТаблицаИзмененныхЭлементов Цикл
		
		Если ТекСтрока.Коэфициент >= 0 Тогда
			
			ТекСтрока.ИтоговыйКоэфициент = ТекИтоговаяСтруктура.ИтогМинус;
			
		Иначе	
			
			ТекСтрока.ИтоговыйКоэфициент = ТекИтоговаяСтруктура.ИтогПлюс;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТаблицаИзмененныхЭлементов.Колонки.Удалить("ВалентностьЭлементаПервойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Удалить("КоличествоЭлементаПервойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Удалить("ЭлементВторойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Удалить("ВалентностьЭлементаВторойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Удалить("КоличествоЭлементаВторойЧасти");
	ТаблицаИзмененныхЭлементов.Колонки.Удалить("Коэфициент");
	
	ТекТаблицаПерваяЧасть = ПолучитьТаблицуДляСравнения(ТаблицаФормулПервойЧасти,ТаблицаИзмененныхЭлементов);
	ТекТаблицаВтораяЧасть = ПолучитьТаблицуДляСравнения(ТаблицаФормулВторойЧасти,ТаблицаИзмененныхЭлементов);
		
    ТекСумма1 = ПолучитьСуммуЭлементовЧасти(ТекТаблицаПерваяЧасть);	
    ТекСумма2 = ПолучитьСуммуЭлементовЧасти(ТекТаблицаВтораяЧасть);	
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("ПовторениеПервойЧасти");
	ТаблицаИзменений.Колонки.Добавить("ПовторениеВторойЧасти");	
	ТаблицаИзменений.Колонки.Добавить("ЭлементТаблицы");
	
	Для Каждого ТекСтрока из ТаблицаИзмененныхЭлементов Цикл
		
		НоваяСтрока = ТаблицаИзменений.Добавить();
		НоваяСтрока.ЭлементТаблицы = ТекСтрока.ЭлементПервойЧасти;
		
		Сумма = 0;
		
		Для Каждого ТекСтрока1 из ТекТаблицаПерваяЧасть Цикл
 			НайденнаяСтрока1 = ТекСтрока1.ТекТаблица.Найти(ТекСтрока.ЭлементПервойЧасти,"ЭлементТаблицы");
			Если НайденнаяСтрока1 <> Неопределено Тогда
 				 Сумма = Сумма + 1;
 			КонецЕсли;	
 		КонецЦикла;	
		
		НоваяСтрока.ПовторениеПервойЧасти = Сумма; 
		
		Сумма = 0;
		
		Для Каждого ТекСтрока2 из ТекТаблицаВтораяЧасть Цикл
 			НайденнаяСтрока1 = ТекСтрока2.ТекТаблица.Найти(ТекСтрока.ЭлементПервойЧасти,"ЭлементТаблицы");
			Если НайденнаяСтрока1 <> Неопределено Тогда
 				 Сумма = Сумма + 1;
 			КонецЕсли;	
 		КонецЦикла;	
		
		НоваяСтрока.ПовторениеВторойЧасти = Сумма;
		
	КонецЦикла;	
	
	КоличествоНеравныхЭлементов = 0;
	
	Для Каждого ТекСтрока из ТаблицаИзмененныхЭлементов Цикл
		
		НайденнаяСтрокаДляПроверки = ТаблицаИзменений.Найти(ТекСтрока.ЭлементПервойЧасти,"ЭлементТаблицы");
		
		Если НайденнаяСтрокаДляПроверки.ПовторениеПервойЧасти = 1
			И НайденнаяСтрокаДляПроверки.ПовторениеВторойЧасти = 1 Тогда
			
			ТекТаблицаПервая = Неопределено;
			ТекТаблицаВторая = Неопределено;
			
			Для Каждого ТекСтрокаТаблицы из ТекТаблицаПерваяЧасть Цикл
				НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекСтрока.ЭлементПервойЧасти,"ЭлементТаблицы");
				Если НайденнаяСтрока1 <> Неопределено Тогда
					ТекТаблицаПервая =  ТекСтрокаТаблицы;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Для Каждого ТекСтрокаТаблицы из ТекТаблицаВтораяЧасть Цикл
				НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекСтрока.ЭлементПервойЧасти,"ЭлементТаблицы");
				Если НайденнаяСтрока1 <> Неопределено Тогда
					ТекТаблицаВторая =  ТекСтрокаТаблицы;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			ТекКоличество1 = ТекТаблицаПервая.ТекТаблица.Найти(ТекСтрока.ЭлементПервойЧасти,"ЭлементТаблицы").Количество;
			ТекКоличество2 = ТекТаблицаВторая.ТекТаблица.Найти(ТекСтрока.ЭлементПервойЧасти,"ЭлементТаблицы").Количество;
			
			ЗначениеВЛевойСтороне = ТекТаблицаПервая.Коэфициент * ТекКоличество1;
			ЗначениеВПравойСтороне = ТекТаблицаВторая.Коэфициент * ТекКоличество2;
			
			Если ЗначениеВЛевойСтороне <> ЗначениеВПравойСтороне Тогда
				Если ЗначениеВЛевойСтороне < ЗначениеВПравойСтороне Тогда
					ТекТаблицаПервая.Коэфициент = ЗначениеВПравойСтороне / ТекКоличество1;
				Иначе	
					ТекТаблицаВторая.Коэфициент = ЗначениеВЛевойСтороне / ТекКоличество2;				
				КонецЕсли;	
			КонецЕсли;	
			
		Иначе
			
			КоличествоНеравныхЭлементов = КоличествоНеравныхЭлементов + 1;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Если КоличествоНеравныхЭлементов > 0 Тогда
		
		Для Каждого ТекСтрока1 из ТекТаблицаПерваяЧасть Цикл
			ТекТаблица = ТекСтрока1.ТекТаблица;
			Для Каждого СтрокаТаблицы из ТекТаблица Цикл
				Если ТаблицаИзмененныхЭлементов.Найти(СтрокаТаблицы.ЭлементТаблицы,"ЭлементПервойЧасти") = Неопределено Тогда
					ТекСтрока1.Коэфициент = 1;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	 
		
		Для Каждого ТекСтрока1 из ТекТаблицаВтораяЧасть Цикл
			ТекТаблица = ТекСтрока1.ТекТаблица;
			Для Каждого СтрокаТаблицы из ТекТаблица Цикл
				Если ТаблицаИзмененныхЭлементов.Найти(СтрокаТаблицы.ЭлементТаблицы,"ЭлементПервойЧасти") = Неопределено Тогда
					ТекСтрока1.Коэфициент = 1;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	 		
		
		Для Каждого ТекСтрокаИзменений из ТаблицаИзменений Цикл
			
			Если ТекСтрокаИзменений.ПовторениеПервойЧасти = 1 
				И ТекСтрокаИзменений.ПовторениеВторойЧасти = 1 Тогда
				
				ТекТаблицаПервая = Неопределено;
				ТекТаблицаВторая = Неопределено;
				
				Для Каждого ТекСтрокаТаблицы из ТекТаблицаПерваяЧасть Цикл
					НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекСтрокаИзменений.ЭлементТаблицы,"ЭлементТаблицы");
					Если НайденнаяСтрока1 <> Неопределено Тогда
						ТекТаблицаПервая =  ТекСтрокаТаблицы;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
				Для Каждого ТекСтрокаТаблицы из ТекТаблицаВтораяЧасть Цикл
					НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекСтрокаИзменений.ЭлементТаблицы,"ЭлементТаблицы");
					Если НайденнаяСтрока1 <> Неопределено Тогда
						ТекТаблицаВторая =  ТекСтрокаТаблицы;
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
				ТекКоличество1 = ТекТаблицаПервая.ТекТаблица.Найти(ТекСтрокаИзменений.ЭлементТаблицы,"ЭлементТаблицы").Количество;
				ТекКоличество2 = ТекТаблицаВторая.ТекТаблица.Найти(ТекСтрокаИзменений.ЭлементТаблицы,"ЭлементТаблицы").Количество;
				
				ЗначениеВЛевойСтороне = ТекТаблицаПервая.Коэфициент * ТекКоличество1;
				ЗначениеВПравойСтороне = ТекТаблицаВторая.Коэфициент * ТекКоличество2;
				
				Если ЗначениеВЛевойСтороне <> ЗначениеВПравойСтороне Тогда
					Если ЗначениеВЛевойСтороне < ЗначениеВПравойСтороне Тогда
						ТекТаблицаПервая.Коэфициент = ЗначениеВПравойСтороне / ТекКоличество1;
					Иначе	
						ТекТаблицаВторая.Коэфициент = ЗначениеВЛевойСтороне / ТекКоличество2;				
					КонецЕсли;	
				КонецЕсли;	
				
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		МассивДругихЭлементов = Новый Массив;
		
		Для Каждого ТекСтрока1 из ТекТаблицаПерваяЧасть Цикл
			Для Каждого ТекСтрокаЭлемента1 из ТекСтрока1.ТекТаблица Цикл
				Для Каждого ТекСтрока2 из ТекТаблицаВтораяЧасть Цикл
					Для Каждого ТекСтрокаЭлемента2 из ТекСтрока2.ТекТаблица Цикл
						Если (ТекСтрокаЭлемента2.ЭлементТаблицы = ТекСтрокаЭлемента1.ЭлементТаблицы)
							И МассивДругихЭлементов.Найти(ТекСтрокаЭлемента2.ЭлементТаблицы) = Неопределено 
							И (ТекСтрокаЭлемента2.ЭлементТаблицы <> "H" И ТекСтрокаЭлемента2.ЭлементТаблицы <> "O") 
							И ТаблицаИзмененныхЭлементов.Найти(ТекСтрокаЭлемента2.ЭлементТаблицы,"ЭлементПервойЧасти") = Неопределено Тогда
							
							МассивДругихЭлементов.Добавить(ТекСтрокаЭлемента2.ЭлементТаблицы);
							
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
		
		Для Каждого ТекСтрока из МассивДругихЭлементов Цикл
			
			ТекТаблицаПервая = Неопределено;
			ТекТаблицаВторая = Неопределено;
			
			Для Каждого ТекСтрокаТаблицы из ТекТаблицаПерваяЧасть Цикл
				НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекСтрока,"ЭлементТаблицы");
				Если НайденнаяСтрока1 <> Неопределено Тогда
					ТекТаблицаПервая =  ТекСтрокаТаблицы;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Для Каждого ТекСтрокаТаблицы из ТекТаблицаВтораяЧасть Цикл
				НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекСтрока,"ЭлементТаблицы");
				Если НайденнаяСтрока1 <> Неопределено Тогда
					ТекТаблицаВторая =  ТекСтрокаТаблицы;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			ТекКоличество1 = ТекТаблицаПервая.ТекТаблица.Найти(ТекСтрока,"ЭлементТаблицы").Количество;
			ТекКоличество2 = ТекТаблицаВторая.ТекТаблица.Найти(ТекСтрока,"ЭлементТаблицы").Количество;
			
			ЗначениеВЛевойСтороне = ТекТаблицаПервая.Коэфициент * ТекКоличество1;
			ЗначениеВПравойСтороне = ТекТаблицаВторая.Коэфициент * ТекКоличество2;
			
			Если ЗначениеВЛевойСтороне <> ЗначениеВПравойСтороне Тогда
				Если ЗначениеВЛевойСтороне < ЗначениеВПравойСтороне Тогда
					ТекТаблицаПервая.Коэфициент = ЗначениеВПравойСтороне / ТекКоличество1;
				Иначе	
					ТекТаблицаВторая.Коэфициент = ЗначениеВЛевойСтороне / ТекКоличество2;				
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	

		Для Каждого ТекСтрокаИзменений из ТаблицаИзменений Цикл
			Если  ТекСтрокаИзменений.ПовторениеПервойЧасти = 1 
				И ТекСтрокаИзменений.ПовторениеВторойЧасти <> 1 Тогда
				ТекЭлементТаблицы = ТекСтрокаИзменений.ЭлементТаблицы;
 				КоличествоВПравойЧасти = 0;
 				Для Каждого ТекСтрокаТаблицы из ТекТаблицаВтораяЧасть Цикл
					ТекТаблицаНоваяЧасть = ТекСтрокаТаблицы.ТекТаблица;
 					Для Каждого СтрокаТек из ТекТаблицаНоваяЧасть Цикл
						
						Если СтрокаТек.ЭлементТаблицы = ТекЭлементТаблицы Тогда
							
							 КоличествоВПравойЧасти = КоличествоВПравойЧасти + (СтрокаТек.Количество * ТекСтрокаТаблицы.Коэфициент);
							
						КонецЕсли;	
						
					КонецЦикла;	
				КонецЦикла;	
				
				ТекТаблицаПервая = Неопределено;
				
				Для Каждого ТекСтрокаТаблицы из ТекТаблицаПерваяЧасть Цикл
 					
					НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекЭлементТаблицы,"ЭлементТаблицы");
					Если НайденнаяСтрока1 <> Неопределено Тогда
						ТекТаблицаПервая =  ТекСтрокаТаблицы;
						Прервать;
					КонецЕсли;	
 					
				КонецЦикла;	
				
				ТекКоличество1 = ТекТаблицаПервая.ТекТаблица.Найти(ТекЭлементТаблицы,"ЭлементТаблицы").Количество;

				ТекТаблицаПервая.Коэфициент = КоличествоВПравойЧасти / ТекКоличество1; 
				
			КонецЕсли;	
 		КонецЦикла;	
		
		ЕстьВодород = ВТаблицеЕстьВодород(ТекТаблицаПерваяЧасть);
		Если ЕстьВодород Тогда
			ПроставитьКоэфициенты("H",ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть);
		КонецЕсли;

		
	Иначе	
		
		МассивДругихЭлементов = Новый Массив;
		
		Для Каждого ТекСтрока1 из ТекТаблицаПерваяЧасть Цикл
			Для Каждого ТекСтрокаЭлемента1 из ТекСтрока1.ТекТаблица Цикл
				Для Каждого ТекСтрока2 из ТекТаблицаВтораяЧасть Цикл
					Для Каждого ТекСтрокаЭлемента2 из ТекСтрока2.ТекТаблица Цикл
						Если (ТекСтрокаЭлемента2.ЭлементТаблицы = ТекСтрокаЭлемента1.ЭлементТаблицы)
							И МассивДругихЭлементов.Найти(ТекСтрокаЭлемента2.ЭлементТаблицы) = Неопределено 
							И (ТекСтрокаЭлемента2.ЭлементТаблицы <> "H" И ТекСтрокаЭлемента2.ЭлементТаблицы <> "O") 
							И ТаблицаИзмененныхЭлементов.Найти(ТекСтрокаЭлемента2.ЭлементТаблицы,"ЭлементПервойЧасти") = Неопределено Тогда
							
							МассивДругихЭлементов.Добавить(ТекСтрокаЭлемента2.ЭлементТаблицы);
							
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;	
			КонецЦикла;	
		КонецЦикла;	
		
		Для Каждого ТекСтрока из МассивДругихЭлементов Цикл
			
			ТекТаблицаПервая = Неопределено;
			ТекТаблицаВторая = Неопределено;
			
			Для Каждого ТекСтрокаТаблицы из ТекТаблицаПерваяЧасть Цикл
				НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекСтрока,"ЭлементТаблицы");
				Если НайденнаяСтрока1 <> Неопределено Тогда
					ТекТаблицаПервая =  ТекСтрокаТаблицы;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			Для Каждого ТекСтрокаТаблицы из ТекТаблицаВтораяЧасть Цикл
				НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекСтрока,"ЭлементТаблицы");
				Если НайденнаяСтрока1 <> Неопределено Тогда
					ТекТаблицаВторая =  ТекСтрокаТаблицы;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			
			ТекКоличество1 = ТекТаблицаПервая.ТекТаблица.Найти(ТекСтрока,"ЭлементТаблицы").Количество;
			ТекКоличество2 = ТекТаблицаВторая.ТекТаблица.Найти(ТекСтрока,"ЭлементТаблицы").Количество;
			
			ЗначениеВЛевойСтороне = ТекТаблицаПервая.Коэфициент * ТекКоличество1;
			ЗначениеВПравойСтороне = ТекТаблицаВторая.Коэфициент * ТекКоличество2;
			
			Если ЗначениеВЛевойСтороне <> ЗначениеВПравойСтороне Тогда
				Если ЗначениеВЛевойСтороне < ЗначениеВПравойСтороне Тогда
					ТекТаблицаПервая.Коэфициент = ЗначениеВПравойСтороне / ТекКоличество1;
				Иначе	
					ТекТаблицаВторая.Коэфициент = ЗначениеВЛевойСтороне / ТекКоличество2;				
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	
		
		ЕстьВодород = ВТаблицеЕстьВодород(ТекТаблицаПерваяЧасть);
		Если ЕстьВодород Тогда
			ПроставитьКоэфициенты("H",ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть);
		КонецЕсли;
		
		
	КонецЕсли;	
		
	СократитьКоефициенты(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть);
	
	УбратьКратность(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть);
		
	Элементы.Декорация7.Заголовок =ПолучитьСтрокуЧасти(ТекТаблицаПерваяЧасть)+" --> "+ПолучитьСтрокуЧасти(ТекТаблицаВтораяЧасть);

*/
}

/*
Функция ПолучитьСтрокуЧасти(ТекПерваяЧасть)
	
	ТекСтрока = "";
	
	ТекКоличество = ТекПерваяЧасть.Количество();
	
	Для Ном = 0 по ТекКоличество - 1 Цикл
		
		ТекСтрокаТаблицы = ТекПерваяЧасть.Получить(Ном);
		
		Если Ном > 0 Тогда
			
			ТекСтрока = ТекСтрока + " + ";
			
		КонецЕсли;	
		
		ТекСтрока = ТекСтрока + ?(ТекСтрокаТаблицы.Коэфициент=1,"",Строка(ТекСтрокаТаблицы.Коэфициент))+ТекСтрокаТаблицы.Формула;
		
	КонецЦикла;	
	
	Возврат ТекСтрока;
	
КонецФункции
*/

/*
Функция ЭтоДелениеБезОстатка(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть,Делитель)
	
	БезОстатка = Истина;
	ФлагПрерывания = Ложь;
	Для Каждого ТекСтрока из ТекТаблицаПерваяЧасть Цикл
		ОстатокОтДеления = ТекСтрока.Коэфициент % Делитель;
		Если ОстатокОтДеления <> 0 Тогда
			ФлагПрерывания = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ФлагПрерывания Тогда
		БезОстатка = Ложь;
	Иначе	
		Для Каждого ТекСтрока из ТекТаблицаВтораяЧасть Цикл
			ОстатокОтДеления = ТекСтрока.Коэфициент % Делитель;
			Если ОстатокОтДеления <> 0 Тогда
				БезОстатка = Ложь;
				Прервать;
			КонецЕсли;	
		КонецЦикла;			
	КонецЕсли;	
	Возврат БезОстатка;
	
КонецФункции	
*/

/*Функция ПолучитьСтруктуруЧастей(ТекЗнач)
	
	СтруктураЧасти = Новый Структура;
	СтруктураЧасти.Вставить("ЧастьПервая","");
	СтруктураЧасти.Вставить("ЧастьВторая","");
	
	НайденныйСимвол = СтрНайти(ТекЗнач,">");
	
	СтруктураЧасти.ЧастьВторая = СокрЛП(Сред(ТекЗнач,НайденныйСимвол+1));
	СтруктураЧасти.ЧастьПервая = СокрЛП(СтрЗаменить(Сред(ТекЗнач,1,НайденныйСимвол-1),"-",""));
	
	
	Возврат СтруктураЧасти;
	
	
КонецФункции*/

function getStructurOfParts(curValue) {
  const findSimbol = curValue.indexOf(">");

  const parts = {
    partTwo: curValue.substr(findSimbol + 1).trim(),
    partOne: curValue
      .substr(0, findSimbol - 1)
      .replace("-", "")
      .trim(),
  };

  return parts;
}

function getTableOfDate(curPart) {
  let tableOfDate = [];

  let arrayOfJoins = [];

  let originalStr = curPart;

  let findedSym = originalStr.indexOf("+");

  while (findedSym !== -1) {
    arrayOfJoins.push(originalStr.substr(0, findedSym - 1).trim());
    originalStr = originalStr.substr(findedSym + 1);
    findedSym = originalStr.indexOf("+");
  }

  arrayOfJoins.push(originalStr.trim());

  for (let k = 0; k < arrayOfJoins.length; k += 1) {
    const curElNew = arrayOfJoins[k];
    const newObj = {
      formule: curElNew,
      tableElementsOfCounts: fillTable(curElNew),
    };
    tableOfDate.push(newObj);
  }

  return tableOfDate;
}

/*Функция ПолучитьТаблицуДанных(ТекЧасть)
	
	МассивСоединений = Новый Массив;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ТаблицаЭлементКоличество");
	Таблица.Колонки.Добавить("Формула");
	
	ИсходнаяСтрока = ТекЧасть;
	НайденнныйСимвол = СтрНайти(ИсходнаяСтрока,"+");
	Пока НайденнныйСимвол <> 0 Цикл
		
		МассивСоединений.Добавить(СокрЛП(Сред(ИсходнаяСтрока,1,НайденнныйСимвол-1)));
		ИсходнаяСтрока = Сред(ИсходнаяСтрока,НайденнныйСимвол+1);
		НайденнныйСимвол = СтрНайти(ИсходнаяСтрока,"+");
		
	КонецЦикла;	
	
	МассивСоединений.Добавить(СокрЛП(ИсходнаяСтрока));
	
	Для Каждого ТекЭлемент из МассивСоединений Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Формула = ТекЭлемент;	
		НоваяСтрока.ТаблицаЭлементКоличество = ЗаполнитьТаблицу(ТекЭлемент);
		
	КонецЦикла;	
	
	Возврат Таблица;
	
КонецФункции*/

function getTableOfParts(curTable) {
  const tableForAnalyz = getTableOfElements();

  let totalTable = [];

  for (let k = 0; k < curTable.length; k += 1) {
    const currentRow = curTable[k];
    const tableOfElementsCurrent = currentRow.tableElementsOfCounts;
    const currentFormule = currentRow.formule;

    let tableWithValences = [];

    for (let m = 0; m < currentRow.tableElementsOfCounts.length; m += 1) {
      const currentRowTwo = currentRow.tableElementsOfCounts[m];
      const foundedElem = tableForAnalyz.find(
        (zn) => zn.elemOfTable === currentRowTwo.elemOfTable
      );
      if (foundedElem !== undefined) {
        const newObj = {
          elementOfTable: currentRowTwo.elemOfTable,
          count: currentRowTwo.count,
          arrayOfValences: foundedElem.arrayVal,
        };
        tableWithValences.push(newObj);
      }
    }

    let tableForValences = [];

    for (let rowOne = 0; rowOne < tableWithValences.length; rowOne += 1) {
      const curRowOne = tableWithValences[rowOne];
      for (
        let rowTwo = 0;
        rowTwo < curRowOne.arrayOfValences.length;
        rowTwo += 1
      ) {
        const newObj = {
          elemOfTable: curRowOne.elementOfTable,
          count: curRowOne.count,
          valence: curRowOne.arrayOfValences[rowTwo],
        };
        tableForValences.push(newObj);
      }
    }

    const tableForValencesTotal = [];

    const countInTable = tableWithValences.length;

    for (
      let numberOne = 0;
      numberOne < tableForValences.length;
      numberOne += 1
    ) {
      for (
        let numberTwo = 0;
        numberTwo < tableForValences.length;
        numberTwo += 1
      ) {
        for (
          let numberThree = 0;
          numberThree < tableForValences.length;
          numberThree += 1
        ) {
          let intermediateTable = [];

          const newRoweOne = tableForValences[numberOne];
          const newRoweTwo = tableForValences[numberTwo];
          const newRoweThree = tableForValences[numberThree];

          const findElemOne = intermediateTable.find(
            (zn) => zn.elemOfTable === newRoweOne.elemOfTable
          );

          fillIntemediateTable(intermediateTable, findElemOne, newRoweOne);

          const findElemTwo = intermediateTable.find(
            (zn) => zn.elemOfTable === newRoweTwo.elemOfTable
          );

          fillIntemediateTable(intermediateTable, findElemTwo, newRoweTwo);

          const findElemThree = intermediateTable.find(
            (zn) => zn.elemOfTable === newRoweThree.elemOfTable
          );

          fillIntemediateTable(intermediateTable, findElemThree, newRoweThree);

          if (intermediateTable.length === countInTable) {
            const newObj = {
              tableDate: intermediateTable,
            };
            tableForValencesTotal.push(newObj);
          }
        }
      }
    }

    let totalObject = new Object();
    totalObject.curFormule = currentFormule;

    for (
      let numberRow = 0;
      numberRow < tableForValencesTotal.length;
      numberRow += 1
    ) {
      const curRow = tableForValencesTotal[numberRow];
      let sumTotal = 0;

      for (let r = 0; r < curRow.tableDate.length; r += 1) {
        const curRowTable = curRow.tableDate[r];
        sumTotal = sumTotal + curRowTable.count * curRowTable.valence;
      }

      if (sumTotal === 0) {
        totalObject.tableOfElements = curRow.tableDate;
        break;
      }
    }

    if (
      totalObject.hasOwnProperty("tableOfElements") === false &&
      tableOfElementsCurrent.length === 1
    ) {
      const rowOfCurTable = tableOfElementsCurrent[0];

      let tableOfElementsNew = [];

      const newObj = {
        valence: 0,
        count: rowOfCurTable.count,
        elemOfTable: rowOfCurTable.elemOfTable,
      };

      tableOfElementsNew.push(newObj);

      totalObject.tableOfElements = tableOfElementsNew;
    }
    totalTable.push(totalObject);
  }

  return totalTable;
}

function fillIntemediateTable(intermediateTable, findElemOne, newRoweOne) {
  if (findElemOne === undefined) {
    const newObj = {
      elemOfTable: newRoweOne.elemOfTable,
      count: newRoweOne.count,
      valence: newRoweOne.valence,
    };
    intermediateTable.push(newObj);
  }
}

/*Функция ПолучитьТаблицуЧастей(ТекТаблица)
	
	ТаблицаДляАнализа = ПолучитьТаблицуЭлементов();
	
	ТаблицаИтоговая = Новый ТаблицаЗначений;
	ТаблицаИтоговая.Колонки.Добавить("Формула");
	ТаблицаИтоговая.Колонки.Добавить("ТаблицаЭлементов");
	
	Для Каждого ТекСтрока из ТекТаблица Цикл	
		
  	ТаблицаЭлементовТекущая = ТекСтрока.ТаблицаЭлементКоличество;
		
		ТекФормула = ТекСтрока.Формула;
		
		ТаблицаСВалентностями = Новый ТаблицаЗначений;
		ТаблицаСВалентностями.Колонки.Добавить("ЭлементТаблицы");
		ТаблицаСВалентностями.Колонки.Добавить("Количество");
		ТаблицаСВалентностями.Колонки.Добавить("МассивВалентностей");
		
		
		Для Каждого ТекСтрока1 из ТекСтрока.ТаблицаЭлементКоличество Цикл
			
			НайденныйЭлемент = ТаблицаДляАнализа.Найти(ТекСтрока1.ЭлементТаблицы,"ЭлементТаблицы");
			
			Если НайденныйЭлемент <> Неопределено Тогда
				
				НоваяСтрока = ТаблицаСВалентностями.Добавить();
				НоваяСтрока.ЭлементТаблицы = ТекСтрока1.ЭлементТаблицы;
				НоваяСтрока.Количество = ТекСтрока1.Количество;
				НоваяСтрока.МассивВалентностей = НайденныйЭлемент.МассивВалентностей;
				
			КонецЕсли;	 
			
		КонецЦикла;	 
		
		ТаблицаПоВалентностям = Новый ТаблицаЗначений;
		ТаблицаПоВалентностям.Колонки.Добавить("ЭлементТаблицы");
		ТаблицаПоВалентностям.Колонки.Добавить("Количество");
		ТаблицаПоВалентностям.Колонки.Добавить("Валентность");
		
		
		Для Каждого ТекСтрока из ТаблицаСВалентностями Цикл
			
			Для Каждого ТекСтрока1 из ТекСтрока.МассивВалентностей Цикл
				
				НоваяСтрока = ТаблицаПоВалентностям.Добавить();
				НоваяСтрока.ЭлементТаблицы = ТекСтрока.ЭлементТаблицы;
				НоваяСтрока.Количество = ТекСтрока.Количество;
				НоваяСтрока.Валентность = ТекСтрока1;
				
			КонецЦикла;	 
			
		КонецЦикла;	 
		
		
		ТаблицаПоВалентностямИтоговая = Новый ТаблицаЗначений;
		ТаблицаПоВалентностямИтоговая.Колонки.Добавить("Таблица");
		
		КоличествоВТаблице = ТаблицаСВалентностями.Количество();
		
		Для Ном = 0 по ТаблицаПоВалентностям.Количество() - 1 Цикл
			
			Для Ном1 = 0 по ТаблицаПоВалентностям.Количество() - 1 Цикл
				
				Для Ном2 = 0 по ТаблицаПоВалентностям.Количество() - 1 Цикл
					
					ПромежуточнаяТаблица = Новый ТаблицаЗначений;
					ПромежуточнаяТаблица.Колонки.Добавить("ЭлементТаблицы");
					ПромежуточнаяТаблица.Колонки.Добавить("Количество");
					ПромежуточнаяТаблица.Колонки.Добавить("Валентность");
					
					ТекСтрока1 = ТаблицаПоВалентностям.Получить(Ном);
					ТекСтрока2 = ТаблицаПоВалентностям.Получить(Ном1);
					ТекСтрока3 = ТаблицаПоВалентностям.Получить(Ном2);
					
					Если ПромежуточнаяТаблица.Найти(ТекСтрока1.ЭлементТаблицы,"ЭлементТаблицы") = Неопределено Тогда
						
						НоваяСтрокаПромежуточнойТаблицы = ПромежуточнаяТаблица.Добавить();
						НоваяСтрокаПромежуточнойТаблицы.ЭлементТаблицы = ТекСтрока1.ЭлементТаблицы;
						НоваяСтрокаПромежуточнойТаблицы.Количество = ТекСтрока1.Количество;
						НоваяСтрокаПромежуточнойТаблицы.Валентность = ТекСтрока1.Валентность;
						
					КонецЕсли;	
					
					Если ПромежуточнаяТаблица.Найти(ТекСтрока2.ЭлементТаблицы,"ЭлементТаблицы") = Неопределено Тогда
						
						НоваяСтрокаПромежуточнойТаблицы = ПромежуточнаяТаблица.Добавить();
						НоваяСтрокаПромежуточнойТаблицы.ЭлементТаблицы = ТекСтрока2.ЭлементТаблицы;
						НоваяСтрокаПромежуточнойТаблицы.Количество = ТекСтрока2.Количество;
						НоваяСтрокаПромежуточнойТаблицы.Валентность = ТекСтрока2.Валентность;
						
					КонецЕсли;	
					
					Если ПромежуточнаяТаблица.Найти(ТекСтрока3.ЭлементТаблицы,"ЭлементТаблицы") = Неопределено Тогда
						
						НоваяСтрокаПромежуточнойТаблицы = ПромежуточнаяТаблица.Добавить();
						НоваяСтрокаПромежуточнойТаблицы.ЭлементТаблицы = ТекСтрока3.ЭлементТаблицы;
						НоваяСтрокаПромежуточнойТаблицы.Количество = ТекСтрока3.Количество;
						НоваяСтрокаПромежуточнойТаблицы.Валентность = ТекСтрока3.Валентность;
						
					КонецЕсли;	
					
					
					Если ПромежуточнаяТаблица.Количество() = КоличествоВТаблице Тогда
						
						НоваяСтрока = ТаблицаПоВалентностямИтоговая.Добавить();
						НоваяСтрока.Таблица = ПромежуточнаяТаблица;
						
					КонецЕсли;	
					
					
				КонецЦикла;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
		СтрокаИтоговойТаблицы = ТаблицаИтоговая.Добавить();
		СтрокаИтоговойТаблицы.Формула = ТекФормула; 
		
		Для Каждого ТекСтрока из ТаблицаПоВалентностямИтоговая Цикл
			
			
			СуммаИтог = 0;
			Для Каждого ТекСтрокаТаблица из ТекСтрока.Таблица Цикл
				
				СуммаИтог = СуммаИтог + (ТекСтрокаТаблица.Количество * ТекСтрокаТаблица.Валентность);
				
			КонецЦикла;	
			
			Если СуммаИтог = 0 Тогда
				
				СтрокаИтоговойТаблицы.ТаблицаЭлементов = ТекСтрока.Таблица;
				Прервать;
				
			КонецЕсли;	
			
		КонецЦикла;	
		  
		Если СтрокаИтоговойТаблицы.ТаблицаЭлементов = Неопределено 
			И ТаблицаЭлементовТекущая.Количество() = 1 Тогда
			
			 СтрокаТекущейТаблицы = ТаблицаЭлементовТекущая[0]; 
			
			 ТаблицаЭлементовНовая = Новый ТаблицаЗначений;
			 ТаблицаЭлементовНовая.Колонки.Добавить("ЭлементТаблицы");
			 ТаблицаЭлементовНовая.Колонки.Добавить("Количество");
			 ТаблицаЭлементовНовая.Колонки.Добавить("Валентность");
			 
			 НоваяСтрока = ТаблицаЭлементовНовая.Добавить();
			 НоваяСтрока.Валентность = 0;
			 НоваяСтрока.Количество = СтрокаТекущейТаблицы.Количество;
			 НоваяСтрока.ЭлементТаблицы = СтрокаТекущейТаблицы.ЭлементТаблицы;
			 
			 СтрокаИтоговойТаблицы.ТаблицаЭлементов = ТаблицаЭлементовНовая;
			
		КонецЕсли;	
		
	КонецЦикла;	 
	
	
	Возврат ТаблицаИтоговая;
		
КонецФункции	*/

/*Функция ПолучитьСтруктуруИтоговыхКоэфициентов(СтруктураКоэфициентов)
	
	ТекИтоговаяСтруктура = Новый Структура;
	
	Если СтруктураКоэфициентов.Плюс = СтруктураКоэфициентов.Минус Тогда
		
	     ТекИтоговаяСтруктура.Вставить("ИтогПлюс",СтруктураКоэфициентов.Плюс/СтруктураКоэфициентов.Минус);	
	     ТекИтоговаяСтруктура.Вставить("ИтогМинус",СтруктураКоэфициентов.Плюс/СтруктураКоэфициентов.Минус);	
		 
	 ИначеЕсли (СтруктураКоэфициентов.Плюс <> 1 И СтруктураКоэфициентов.Минус = 1)
		 ИЛИ (СтруктураКоэфициентов.Плюс = 1 И СтруктураКоэфициентов.Минус <> 1) Тогда	 
		
         ТекИтоговаяСтруктура.Вставить("ИтогПлюс",СтруктураКоэфициентов.Плюс);	
	     ТекИтоговаяСтруктура.Вставить("ИтогМинус",СтруктураКоэфициентов.Минус);			
		
	ИначеЕсли СтруктураКоэфициентов.Плюс > СтруктураКоэфициентов.Минус Тогда
		 
		 ИсходныйПлюс = СтруктураКоэфициентов.Плюс;
		 ИсходныйМинус = СтруктураКоэфициентов.Минус;
		 
		 ТекЗначениеМинус = ИсходныйМинус;
		 
		 Для Ном = 2 по ТекЗначениеМинус Цикл
			 
			 РезультатПлюс = ИсходныйПлюс / Ном;
			 РезультатМинус = ИсходныйМинус / Ном;
			 
			 ОстатокПлюс = ИсходныйПлюс % Ном;
			 ОстатокМинус = ИсходныйМинус % Ном;
			 
			 Пока ОстатокПлюс = 0 
				 И ОстатокМинус = 0 Цикл
				 
				  ИсходныйПлюс = РезультатПлюс;
				  ИсходныйМинус = РезультатМинус;
				  
				  РезультатПлюс = ИсходныйПлюс / Ном;
				  РезультатМинус = ИсходныйМинус / Ном;
				  
				  ОстатокПлюс = ИсходныйПлюс % Ном;
				  ОстатокМинус = ИсходныйМинус % Ном;
				  
				  
			 КонецЦикла;	 
			 
		 КонецЦикла;	 
		 
         ТекИтоговаяСтруктура.Вставить("ИтогПлюс",ИсходныйПлюс);	
	     ТекИтоговаяСтруктура.Вставить("ИтогМинус",ИсходныйМинус);	
		 
	ИначеЕсли СтруктураКоэфициентов.Плюс < СтруктураКоэфициентов.Минус Тогда
		 
		 ИсходныйПлюс = СтруктураКоэфициентов.Плюс;
		 ИсходныйМинус = СтруктураКоэфициентов.Минус;
		 
		 ТекЗначениеПлюс = ИсходныйПлюс;
		 
		 Для Ном = 2 по ТекЗначениеПлюс Цикл
			 
			 РезультатПлюс = ИсходныйПлюс / Ном;
			 РезультатМинус = ИсходныйМинус / Ном;
			 
			 ОстатокПлюс = ИсходныйПлюс % Ном;
			 ОстатокМинус = ИсходныйМинус % Ном;
			 
			 Пока ОстатокПлюс = 0 
				 И ОстатокМинус = 0 Цикл
				 
				 ИсходныйПлюс = РезультатПлюс;
				 ИсходныйМинус = РезультатМинус;
				 
				 РезультатПлюс = ИсходныйПлюс / Ном;
				 РезультатМинус = ИсходныйМинус / Ном;
				 
				 ОстатокПлюс = ИсходныйПлюс % Ном;
				 ОстатокМинус = ИсходныйМинус % Ном;
	 			 
			 КонецЦикла;	 
			 
		 КонецЦикла;	 
		 
         ТекИтоговаяСтруктура.Вставить("ИтогПлюс",ИсходныйПлюс);	
	     ТекИтоговаяСтруктура.Вставить("ИтогМинус",ИсходныйМинус);					 
		 
	КонецЕсли;	
	
	Возврат ТекИтоговаяСтруктура;
	
КонецФункции	*/

/*
Функция ПолучитьТаблицуДляСравнения(ТекТаблица,ТекТаблицаКоэфициентов)
	
 	ТаблицаДляСравненияПервойЧасти = Новый ТаблицаЗначений;
	ТаблицаДляСравненияПервойЧасти.Колонки.Добавить("Формула");
	ТаблицаДляСравненияПервойЧасти.Колонки.Добавить("ТекТаблица");
	ТаблицаДляСравненияПервойЧасти.Колонки.Добавить("Коэфициент");

	Для Каждого ТекСтрока из ТекТаблица Цикл

		НоваяСтрока = ТаблицаДляСравненияПервойЧасти.Добавить();
		НоваяСтрока.Формула = ТекСтрока.Формула;
		НоваяСтрока.ТекТаблица = ТекСтрока.ТаблицаЭлементов;
		
		Коэфициент = 1;
		
		Для Каждого ТекСтрокаТаблицы из ТекСтрока.ТаблицаЭлементов Цикл
			
			НайденнаяСтрока = ТекТаблицаКоэфициентов.Найти(ТекСтрокаТаблицы.ЭлементТаблицы,"ЭлементПервойЧасти");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				 Коэфициент = НайденнаяСтрока.ИтоговыйКоэфициент;
				 Прервать;
				 
			КонецЕсли;	
			
		КонецЦикла;	
		
		НоваяСтрока.Коэфициент = Коэфициент;
		
	
	КонецЦикла;
	
	Возврат ТаблицаДляСравненияПервойЧасти;
	
КонецФункции	
*/

/*
Функция ПолучитьСуммуЭлементовЧасти(ТекТаблица)
	
	ТекСумма = 0;
	Для Каждого ТекСтрока из ТекТаблица Цикл
 		ТекКоефициент = ТекСтрока.Коэфициент;
 		Для Каждого ТекСтрокаТаблицы из ТекСтрока.ТекТаблица Цикл
 			ТекСумма = ТекСумма + (ТекКоефициент * ТекСтрокаТаблицы.Количество);
 		КонецЦикла;	
 	КонецЦикла;	
 	Возврат ТекСумма;
	
КонецФункции	*/

/*
Функция ВТаблицеЕстьВодород(ТекТаблица)
	
	ЕстьВодород = Ложь;
	Для Каждого ТекСтрока1 из ТекТаблица Цикл
		Если ТекСтрока1.ТекТаблица.Найти("H","ЭлементТаблицы") <> Неопределено Тогда
			ЕстьВодород = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Возврат ЕстьВодород;
	
КонецФункции	
*/

/*
Процедура ПроставитьКоэфициенты(ТекЭлемент,ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть)
	
	ТекТаблицаПервая = Неопределено;
	ТекТаблицаВторая = Неопределено;
	
	Для Каждого ТекСтрокаТаблицы из ТекТаблицаПерваяЧасть Цикл
		НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекЭлемент,"ЭлементТаблицы");
		Если НайденнаяСтрока1 <> Неопределено Тогда
			ТекТаблицаПервая =  ТекСтрокаТаблицы;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого ТекСтрокаТаблицы из ТекТаблицаВтораяЧасть Цикл
		НайденнаяСтрока1 = ТекСтрокаТаблицы.ТекТаблица.Найти(ТекЭлемент,"ЭлементТаблицы");
		Если НайденнаяСтрока1 <> Неопределено Тогда
			ТекТаблицаВторая =  ТекСтрокаТаблицы;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
	ТекКоличество1 = ТекТаблицаПервая.ТекТаблица.Найти(ТекЭлемент,"ЭлементТаблицы").Количество;
	ТекКоличество2 = ТекТаблицаВторая.ТекТаблица.Найти(ТекЭлемент,"ЭлементТаблицы").Количество;
	
	ЗначениеВЛевойСтороне = ТекТаблицаПервая.Коэфициент * ТекКоличество1;
	ЗначениеВПравойСтороне = ТекТаблицаВторая.Коэфициент * ТекКоличество2;
	
	Если ЗначениеВЛевойСтороне <> ЗначениеВПравойСтороне Тогда
		Если ЗначениеВЛевойСтороне < ЗначениеВПравойСтороне Тогда
 			ТекТаблицаПервая.Коэфициент = ЗначениеВПравойСтороне / ТекКоличество1;
 		Иначе	
 			ТекТаблицаВторая.Коэфициент = ЗначениеВЛевойСтороне / ТекКоличество2;				
 		КонецЕсли;	
 	КонецЕсли;	
 	
КонецПроцедуры	
*/

/*
Процедура СократитьКоефициенты(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть)
	
	СписокКоэфициентов = Новый СписокЗначений;
	Для Каждого ТекСтрока из ТекТаблицаПерваяЧасть Цикл
		СписокКоэфициентов.Добавить(ТекСтрока.Коэфициент);
 	КонецЦикла;	
	Для Каждого ТекСтрока из ТекТаблицаВтораяЧасть Цикл
		СписокКоэфициентов.Добавить(ТекСтрока.Коэфициент);
 	КонецЦикла;	
	
	НайденныйНоль = СписокКоэфициентов.НайтиПоЗначению(0);
	Если НайденныйНоль = Неопределено Тогда
		
		СписокКоэфициентов.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		ПервыйЭлемент = СписокКоэфициентов[0].Значение;		 
		
		Если ПервыйЭлемент > 1 Тогда
			
			МассивКоэфициентов = ПолучитьМассивДелителей(ПервыйЭлемент);
			
			Для Каждого ТекДелитель из МассивКоэфициентов Цикл
				
				ЭтоДелениеБезОстатка = ЭтоДелениеБезОстатка(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть,ТекДелитель);
				
				Пока ЭтоДелениеБезОстатка Цикл
					
					Для Каждого ТекСтрока из ТекТаблицаПерваяЧасть Цикл
						ТекСтрока.Коэфициент = ТекСтрока.Коэфициент / ТекДелитель;
					КонецЦикла;	
					Для Каждого ТекСтрока из ТекТаблицаВтораяЧасть Цикл
						ТекСтрока.Коэфициент = ТекСтрока.Коэфициент / ТекДелитель;				 
					КонецЦикла;	
					
					ЭтоДелениеБезОстатка = ЭтоДелениеБезОстатка(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть,ТекДелитель);
					
				КонецЦикла;	 
			КонецЦикла;	 
			
			
		КонецЕсли;
		 
	КонецЕсли;	
	
КонецПроцедуры	
*/

/*
Функция ПолучитьМассивДелителей(ТекЧисло)
	
	ТекМассив = Новый Массив;
 	Для Ном = 1 по ТекЧисло Цикл
		
		Если Ном = 1 Тогда
 			Продолжить;
 		КонецЕсли;	
		
		ТекМассив.Добавить(Ном);
		
	КонецЦикла;	
 	Возврат ТекМассив;
	
КонецФункции	
*/

/*Процедура УбратьКратность(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть)
	
	СписокКоэфициентов = Новый СписокЗначений;
	Для Каждого ТекСтрока из ТекТаблицаПерваяЧасть Цикл
		СписокКоэфициентов.Добавить(ТекСтрока.Коэфициент);
 	КонецЦикла;	
	Для Каждого ТекСтрока из ТекТаблицаВтораяЧасть Цикл
		СписокКоэфициентов.Добавить(ТекСтрока.Коэфициент);
 	КонецЦикла;	
	
	НайденныйНоль = СписокКоэфициентов.НайтиПоЗначению(0);
	Если НайденныйНоль = Неопределено Тогда

		ЕстьКратность = ЕстьКратность(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть);
		
		НомСтр = 1;
		
		Пока ЕстьКратность Цикл
			
			Для Каждого ТекСтрока из ТекТаблицаПерваяЧасть Цикл
				ТекСтрока.Коэфициент = ТекСтрока.Коэфициент * 2;
			КонецЦикла;	
			Для Каждого ТекСтрока из ТекТаблицаВтораяЧасть Цикл
				ТекСтрока.Коэфициент = ТекСтрока.Коэфициент * 2;
			КонецЦикла;	
			
			Если НомСтр = 1000 Тогда
				
				Прервать;
				
			КонецЕсли;	 			
			
			НомСтр = НомСтр + 1;
			
		    ЕстьКратность = ЕстьКратность(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть);
 			
		КонецЦикла;	 
		
		
	КонецЕсли;	
	
КонецПроцедуры	*/

/*Функция ЕстьКратность(ТекТаблицаПерваяЧасть,ТекТаблицаВтораяЧасть)
	
	ТекЕстьКратность = Ложь;
	ФлагПрерывания = Ложь;
	Для Каждого ТекСтрока из ТекТаблицаПерваяЧасть Цикл
 		КратныйКоэфициент = ЧислоЧетное(ТекСтрока.Коэфициент);
 		Если Не КратныйКоэфициент Тогда
             ФлагПрерывания = Истина;
			 Прервать;
 		КонецЕсли;	
 	КонецЦикла;	
	
	Если ФлагПрерывания Тогда
 		ТекЕстьКратность = Истина; 
 	Иначе	
 		Для Каждого ТекСтрока из ТекТаблицаВтораяЧасть Цикл
			КратныйКоэфициент = ЧислоЧетное(ТекСтрока.Коэфициент);
			Если НЕ КратныйКоэфициент Тогда
				ТекЕстьКратность = Истина;
				Прервать;
			КонецЕсли;	
		КонецЦикла;			
 	КонецЕсли;		
	Возврат ТекЕстьКратность;
	
КонецФункции	*/

/*Функция ЧислоЧетное(ТекЧисло)
	
	ЦелаяЧасть = Цел(ТекЧисло);
	
	Возврат ?((ТекЧисло-ЦелаяЧасть)=0,Истина,Ложь);
	
КонецФункции	*/

function getArrayOfNumbers() {
  let curArray = [];
  curArray.push("0");
  curArray.push("1");
  curArray.push("2");
  curArray.push("3");
  curArray.push("4");
  curArray.push("5");
  curArray.push("6");
  curArray.push("7");
  curArray.push("8");
  curArray.push("9");
  return curArray;
}

function fillTable(curElement) {
  const curArrayOfNumbers = getArrayOfNumbers();

  const tableOfElements = getTableOfElements();

  let tableElementsOfCount = [];

  let curCount = curElement.length;

  for (let k = 0; k <= curCount; k += 1) {
    for (let d = 0; d <= k; d += 1) {
      const curValue = curElement.substr(0, d + 1);
      const curValueTwo = curElement.substr(0, d + 2);

      const foundValueOne = tableOfElements.find(
        (zn) => zn.elemOfTable === curValue
      );

      const foundValueTwo = tableOfElements.find(
        (zn) => zn.elemOfTable === curValueTwo
      );

      if (foundValueOne !== undefined || foundValueTwo !== undefined) {
        let newObj = new Object();

        newObj.elemOfTable =
          foundValueTwo !== undefined ? curValueTwo : curValue;

        const newValue = curElement.substr(
          foundValueTwo !== undefined ? d + 2 : d + 1,
          1
        );

        const findElemNew = curArrayOfNumbers.indexOf(newValue);

        if (newValue === "" || findElemNew === -1) {
          newObj.count = 1;
          curElement = curElement.substr(
            foundValueTwo !== undefined ? d + 2 : d + 1
          );
          curCount = curElement.length;
          tableElementsOfCount.push(newObj);
          break;
        } else {
          let indexOfBegin = foundValueTwo !== undefined ? d + 2 : d + 1;
          let currentNumber = "";
          let beginValue = curElement.substr(indexOfBegin, 1);
          let foundedElem = curArrayOfNumbers.indexOf(beginValue);
          while (foundedElem !== -1) {
            currentNumber = currentNumber + beginValue;
            indexOfBegin = indexOfBegin + 1;
            beginValue = curElement.substr(indexOfBegin, 1);
            foundedElem = curArrayOfNumbers.indexOf(beginValue);
          }
          newObj.count = getNumber(currentNumber);
          curElement = curElement.substr(indexOfBegin);
          curCount = curElement.length;
          tableElementsOfCount.push(newObj);
          break;
        }
      }
    }
  }

  return tableElementsOfCount;
}

function getNumber(currentNumber) {
  let numberReturn = 0;
  try {
    numberReturn = parseInt(currentNumber);
  } catch (error) {
    numberReturn = 0;
  }
  return numberReturn;
}

/*Функция ЗаполнитьТаблицу(ТекЭлемент)
	
	ТекМассивЦифр = ПолучитьМассивЦифр();
	
	ТекТаблицаЭлементов = ПолучитьТаблицуЭлементов();
	
	ТаблицаЭлементКоличество = Новый ТаблицаЗначений;
	ТаблицаЭлементКоличество.Колонки.Добавить("ЭлементТаблицы");
	ТаблицаЭлементКоличество.Колонки.Добавить("Количество");
	ТекКоличество = СтрДлина(ТекЭлемент);
	
	Для Ном = 1 по ТекКоличество Цикл
		
		Для Ном1 = 1 по Ном Цикл
			
			ТекЗнач = Сред(ТекЭлемент,1,Ном1);
			
			ТекЗнач1 = Сред(ТекЭлемент,1,Ном1+1);
			
			НайденноеЗначение1 = ТекТаблицаЭлементов.Найти(ТекЗнач,"ЭлементТаблицы");
			НайденноеЗначение2 = ТекТаблицаЭлементов.Найти(ТекЗнач1,"ЭлементТаблицы");
			
			Если НайденноеЗначение1 <> Неопределено
				ИЛИ НайденноеЗначение2 <> Неопределено Тогда
			
 				НоваяСтрока = ТаблицаЭлементКоличество.Добавить();
				НоваяСтрока.ЭлементТаблицы = ?(НайденноеЗначение2 <> Неопределено,ТекЗнач1,ТекЗнач);
				НовоеЗначение = Сред(ТекЭлемент,?(НайденноеЗначение2 <> Неопределено,Ном1+2,Ном1+1),1);
				НайденныйЭлемент = ТекМассивЦифр.Найти(НовоеЗначение);
				Если НовоеЗначение = "" ИЛИ 
					НайденныйЭлемент = Неопределено Тогда
					НоваяСтрока.Количество = 1;
					ТекЭлемент = Сред(ТекЭлемент,?(НайденноеЗначение2 <> Неопределено,Ном1+2,Ном1+1));
					ТекКоличество = СтрДлина(ТекЭлемент);
					Прервать;
					
				Иначе	 
					
					ИндексНачала = ?(НайденноеЗначение2 <> Неопределено,Ном1+2,Ном1+1);
					ТекЦифра = "";
					ИсходноеЗначение = Сред(ТекЭлемент,ИндексНачала,1);
					НайденныйЭлемент = ТекМассивЦифр.Найти(ИсходноеЗначение);
					Пока НайденныйЭлемент <> Неопределено Цикл
						ТекЦифра = ТекЦифра + ИсходноеЗначение;
						ИндексНачала = ИндексНачала + 1;
						ИсходноеЗначение = Сред(ТекЭлемент,ИндексНачала,1);
						НайденныйЭлемент = ТекМассивЦифр.Найти(ИсходноеЗначение);
					КонецЦикла;
					НоваяСтрока.Количество = ПолучитьЧисло(ТекЦифра);
					ТекЭлемент = Сред(ТекЭлемент,ИндексНачала);
					ТекКоличество = СтрДлина(ТекЭлемент);
					Прервать;
			  КонецЕсли;	


		   КонецЕсли;	
		
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат ТаблицаЭлементКоличество;
	
	
КонецФункции	*/

/*
Функция ПолучитьЧисло(ТекСтрока)
	
	ТекЧисло = 0;
	Попытка
		ТекЧисло = Число(ТекСтрока);
	Исключение	
		ТекЧисло = 0;				
	КонецПопытки;	
	Возврат ТекЧисло;
	
КонецФункции	
*/

/*
Функция ПолучитьМассивЦифр()
	
	Массив = Новый Массив;
	Массив.Добавить("0");
	Массив.Добавить("1");
	Массив.Добавить("2");
	Массив.Добавить("3");
	Массив.Добавить("4");
	Массив.Добавить("5");
	Массив.Добавить("6");
	Массив.Добавить("7");
	Массив.Добавить("8");
	Массив.Добавить("9");
	Возврат Массив;
	
КонецФункции	
*/

function addElenetInTableValent(tableVal, curEl, arrayOfVal) {
  const newObj = {
    elemOfTable: curEl,
    arrayVal: arrayOfVal,
  };
  tableVal.push(newObj);
}

function getArrayVal() {
  let totalArray = [];
  for (let n = 0; n < arguments.length; n += 1) {
    totalArray.push(arguments[n]);
  }
  return totalArray;
}

function getTableOfElements() {
  let tableNew = [];

  addElenetInTableValent(tableNew, "H", getArrayVal(1, -1));
  addElenetInTableValent(tableNew, "He", getArrayVal(8));
  addElenetInTableValent(tableNew, "Li", getArrayVal(1));
  addElenetInTableValent(tableNew, "Be", getArrayVal(2));
  addElenetInTableValent(tableNew, "B", getArrayVal(-3, 3));
  addElenetInTableValent(tableNew, "C", getArrayVal(2, 4));
  addElenetInTableValent(tableNew, "N", getArrayVal(-3, -2, -1, 1, 2, 3, 4, 5));
  addElenetInTableValent(tableNew, "O", getArrayVal(-2));
  addElenetInTableValent(tableNew, "F", getArrayVal(-1, 1));
  addElenetInTableValent(tableNew, "Ne", getArrayVal(8));
  addElenetInTableValent(tableNew, "Na", getArrayVal(1));
  addElenetInTableValent(tableNew, "Mg", getArrayVal(2));
  addElenetInTableValent(tableNew, "Al", getArrayVal(3));
  addElenetInTableValent(tableNew, "Si", getArrayVal(-4, 2, 4));
  addElenetInTableValent(tableNew, "P", getArrayVal(-3, 1, 3, 5));
  addElenetInTableValent(tableNew, "S", getArrayVal(-2, 2, 4, 6));
  addElenetInTableValent(tableNew, "Cl", getArrayVal(-1, 1, 2, 3, 4, 5, 7));
  addElenetInTableValent(tableNew, "Ar", getArrayVal(8));
  addElenetInTableValent(tableNew, "K", getArrayVal(1));
  addElenetInTableValent(tableNew, "Ca", getArrayVal(2));
  addElenetInTableValent(tableNew, "Sc", getArrayVal(3));
  addElenetInTableValent(tableNew, "Ti", getArrayVal(2, 3, 4));
  addElenetInTableValent(tableNew, "V", getArrayVal(2, 3, 4, 5));
  addElenetInTableValent(tableNew, "Cr", getArrayVal(2, 3, 6));
  addElenetInTableValent(tableNew, "Mn", getArrayVal(2, 3, 4, 6, 7));
  addElenetInTableValent(tableNew, "Fe", getArrayVal(2, 3, 4, 6));
  addElenetInTableValent(tableNew, "Co", getArrayVal(2, 3, 4));
  addElenetInTableValent(tableNew, "Ni", getArrayVal(1, 2, 3, 4));
  addElenetInTableValent(tableNew, "Cu", getArrayVal(1, 2, 3));
  addElenetInTableValent(tableNew, "Zn", getArrayVal(2));
  addElenetInTableValent(tableNew, "Ga", getArrayVal(2, 3));
  addElenetInTableValent(tableNew, "Ge", getArrayVal(-4, 2, 4));
  addElenetInTableValent(tableNew, "As", getArrayVal(-3, 2, 3, 5));
  addElenetInTableValent(tableNew, "Se", getArrayVal(-2, 2, 4, 6));
  addElenetInTableValent(tableNew, "Br", getArrayVal(-1, 1, 3, 4, 5));
  addElenetInTableValent(tableNew, "Kr", getArrayVal(8));
  addElenetInTableValent(tableNew, "Rb", getArrayVal(1));
  addElenetInTableValent(tableNew, "Sr", getArrayVal(2));
  addElenetInTableValent(tableNew, "Y", getArrayVal(3));
  addElenetInTableValent(tableNew, "Zr", getArrayVal(2, 3, 4));
  addElenetInTableValent(tableNew, "Nb", getArrayVal(2, 3, 4, 5));
  addElenetInTableValent(tableNew, "Mo", getArrayVal(2, 3, 4, 5, 6));
  addElenetInTableValent(tableNew, "Tc", getArrayVal(6));
  addElenetInTableValent(tableNew, "Ru", getArrayVal(2, 3, 4, 6, 7, 8));
  addElenetInTableValent(tableNew, "Rh", getArrayVal(2, 3, 4, 6));
  addElenetInTableValent(tableNew, "Pd", getArrayVal(2, 4, 6));
  addElenetInTableValent(tableNew, "Ag", getArrayVal(1, 2, 3));
  addElenetInTableValent(tableNew, "Cd", getArrayVal(1, 2));
  addElenetInTableValent(tableNew, "In", getArrayVal(1, 2, 3));
  addElenetInTableValent(tableNew, "Sn", getArrayVal(2, 4));
  addElenetInTableValent(tableNew, "Sb", getArrayVal(-3, 3, 4, 5));
  addElenetInTableValent(tableNew, "Te", getArrayVal(-2, 2, 4, 6));
  addElenetInTableValent(tableNew, "I", getArrayVal(-1, 1, 3, 4, 5, 7));
  addElenetInTableValent(tableNew, "Xe", getArrayVal(8));
  addElenetInTableValent(tableNew, "Cs", getArrayVal(1));
  addElenetInTableValent(tableNew, "Ba", getArrayVal(2));
  addElenetInTableValent(tableNew, "La", getArrayVal(3));
  addElenetInTableValent(tableNew, "Ce", getArrayVal(3, 4));
  addElenetInTableValent(tableNew, "Pr", getArrayVal(3));
  addElenetInTableValent(tableNew, "Nd", getArrayVal(3, 4));
  addElenetInTableValent(tableNew, "Pm", getArrayVal(3));
  addElenetInTableValent(tableNew, "Sm", getArrayVal(2, 3));
  addElenetInTableValent(tableNew, "Eu", getArrayVal(2, 3));
  addElenetInTableValent(tableNew, "Gd", getArrayVal(3));
  addElenetInTableValent(tableNew, "Tb", getArrayVal(3, 4));
  addElenetInTableValent(tableNew, "Dy", getArrayVal(3));
  addElenetInTableValent(tableNew, "Ho", getArrayVal(3));
  addElenetInTableValent(tableNew, "Er", getArrayVal(3));
  addElenetInTableValent(tableNew, "Tm", getArrayVal(2, 3));
  addElenetInTableValent(tableNew, "Yb", getArrayVal(2, 3));
  addElenetInTableValent(tableNew, "Lu", getArrayVal(3));
  addElenetInTableValent(tableNew, "Hf", getArrayVal(4));
  addElenetInTableValent(tableNew, "Ta", getArrayVal(3, 4, 5));
  addElenetInTableValent(tableNew, "W", getArrayVal(2, 3, 4, 5, 6));
  addElenetInTableValent(tableNew, "Re", getArrayVal(-1, 1, 2, 3, 4, 5, 6, 7));
  addElenetInTableValent(tableNew, "Os", getArrayVal(2, 3, 4, 6, 8));
  addElenetInTableValent(tableNew, "Ir", getArrayVal(1, 2, 3, 4, 6));
  addElenetInTableValent(tableNew, "Pt", getArrayVal(1, 2, 3, 4, 6));
  addElenetInTableValent(tableNew, "Au", getArrayVal(1, 2, 3));
  addElenetInTableValent(tableNew, "Hg", getArrayVal(1, 2));
  addElenetInTableValent(tableNew, "Tl", getArrayVal(1, 2, 3));
  addElenetInTableValent(tableNew, "Pb", getArrayVal(2, 4));
  addElenetInTableValent(tableNew, "Bi", getArrayVal(-3, 2, 3, 4, 5));
  addElenetInTableValent(tableNew, "Po", getArrayVal(-2, 2, 4, 6));
  addElenetInTableValent(tableNew, "Rn", getArrayVal(8));
  addElenetInTableValent(tableNew, "Ra", getArrayVal(2));
  addElenetInTableValent(tableNew, "Ac", getArrayVal(3));
  addElenetInTableValent(tableNew, "Th", getArrayVal(4));
  addElenetInTableValent(tableNew, "Pa", getArrayVal(5));
  addElenetInTableValent(tableNew, "U", getArrayVal(2, 3, 4, 5, 6));
  return tableNew;
}

/*
Функция ПолучитьТаблицуЭлементов()
	
	ТаблицаНовая = Новый ТаблицаЗначений;
	ТаблицаНовая.Колонки.Добавить("ЭлементТаблицы");
	ТаблицаНовая.Колонки.Добавить("МассивВалентностей");
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);
	МассивВалентностей.Добавить(-1);
//	МассивВалентностей.Добавить(0);
 	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "H";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(8);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "He";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Li";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Be";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-3);
	МассивВалентностей.Добавить(3);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "B";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);
	МассивВалентностей.Добавить(4);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "C";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-3);
	МассивВалентностей.Добавить(-2);
	МассивВалентностей.Добавить(-1);
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	
	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "N";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-2);
//	МассивВалентностей.Добавить(0);
 	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "O";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-1);
	МассивВалентностей.Добавить(1);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "F";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(8);
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ne";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Na";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Mg";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);
 	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Al";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-4);
	МассивВалентностей.Добавить(2);
	МассивВалентностей.Добавить(4);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Si";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-3);
	МассивВалентностей.Добавить(1);
	МассивВалентностей.Добавить(3);
	МассивВалентностей.Добавить(5);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "P";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-2);
	МассивВалентностей.Добавить(2);
	МассивВалентностей.Добавить(4);
	МассивВалентностей.Добавить(6);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "S";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-1);
	МассивВалентностей.Добавить(1);
	МассивВалентностей.Добавить(2);
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);
	МассивВалентностей.Добавить(5);
	МассивВалентностей.Добавить(7);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Cl";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(8);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ar";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "K";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ca";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Sc";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);
	МассивВалентностей.Добавить(4);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ti";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);
	МассивВалентностей.Добавить(4);
	МассивВалентностей.Добавить(5);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "V";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);
	МассивВалентностей.Добавить(6);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Cr";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);
	МассивВалентностей.Добавить(7);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Mn";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Fe";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);
	МассивВалентностей.Добавить(4);	

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Co";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);		
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);
	МассивВалентностей.Добавить(4);	

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ni";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);		
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);

	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Cu";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
 
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Zn";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ga";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-4);		
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(4);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ge";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-3);		
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(5);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "As";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-2);		
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Se";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-1);		
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Br";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(8);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Kr";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Rb";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Sr";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	
	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Y";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);		
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Zr";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);		
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Nb";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);		
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	
	МассивВалентностей.Добавить(6);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Mo";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(6);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Tc";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);	
	МассивВалентностей.Добавить(7);	
	МассивВалентностей.Добавить(8);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ru";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Rh";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Pd";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ag";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Cd";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "In";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(4);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Sn";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-3);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Sb";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-2);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Te";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-1);	
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	
	МассивВалентностей.Добавить(7);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "I";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(8);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Xe";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Cs";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ba";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "La";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
		
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ce";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Pr";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Nd";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Pm";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);		
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Sm";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);		
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Eu";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Gd";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Tb";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Dy";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ho";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Er";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);		
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Tm";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);		
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Yb";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Lu";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(4);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Hf";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ta";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);		
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	
	МассивВалентностей.Добавить(6);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "W";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-1);		
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	
	МассивВалентностей.Добавить(6);	
	МассивВалентностей.Добавить(7);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Re";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);	
	МассивВалентностей.Добавить(8);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Os";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ir";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Pt";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Au";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Hg";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(1);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Tl";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(4);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Pb";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-3);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Bi";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(-2);	
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(6);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Po";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(8);	

	
	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Rn";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	

 	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ra";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(3);	

 	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Ac";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(4);	

 	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Th";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(5);	

 	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "Pa";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	МассивВалентностей = Новый Массив;
	МассивВалентностей.Добавить(2);	
	МассивВалентностей.Добавить(3);	
	МассивВалентностей.Добавить(4);	
	МассивВалентностей.Добавить(5);	
	МассивВалентностей.Добавить(6);	

 	НоваяСтрока = ТаблицаНовая.Добавить();
	НоваяСтрока.ЭлементТаблицы = "U";
	НоваяСтрока.МассивВалентностей = МассивВалентностей;
	
	
	Возврат ТаблицаНовая;
	
КонецФункции	
*/
